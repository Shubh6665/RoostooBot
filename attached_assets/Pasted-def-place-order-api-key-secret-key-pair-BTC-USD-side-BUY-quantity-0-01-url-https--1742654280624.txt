def place_order(api_key, secret_key, pair="BTC/USD", side="BUY", quantity=0.01):
    url = "https://mock-api.roostoo.com/v3/place_order"
    timestamp = str(int(time.time() * 1000)) 
    
    params = {
        "pair": pair,
        "side": side,
        "type": "MARKET",
        "quantity": quantity,
        "timestamp": timestamp,
    }
    
    query_string = "&".join([f"{key}={value}" for key, value in sorted(params.items())])
    signature = hmac.new(secret_key.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "RST-API-KEY": api_key,
        "MSG-SIGNATURE": signature,
    }
    
    response = requests.post(url, data=params, headers=headers)
    if response.status_code == 200 and response.json()["Success"]:
        print(f"Order placed successfully: {response.json()}")
    else:
        print(f"Error placing order: {response.json()['ErrMsg']}")

print("Fetching ticker:")
print(get_ticker("BTC/USD"))

print("Fetching balance:")
print(get_balance(API_KEY, SECRET))

import time

def trade_bot_loop(model, env):
    while True:
        try:
            # 1. Fetch current market data
            market_data = get_ticker("BTC/USD")
            current_price = market_data["Data"]["BTC/USD"]["LastPrice"]
            print(f"Current Price: {current_price}")
            
            # 2. Fetch account balance using SpotWallet (as per API response)
            balance_data = get_balance(API_KEY, SECRET)
            # Use SpotWallet instead of Wallet if response key is 'SpotWallet'
            spot_wallet = balance_data.get("SpotWallet", {})
            usd_balance = spot_wallet.get("USD", {}).get("Free", 0)
            btc_balance = spot_wallet.get("BTC", {}).get("Free", 0)
            print(f"Balance - USD: {usd_balance}, BTC: {btc_balance}")
            
            # 3. Create observation/state for decision making
            # Yahan aap RL model se predict kar sakte hain ya manual strategy apply kar sakte hain.
            # Agar aap RL model use kar rahe hain:
            obs = env.reset()  # Ya current state observation; ensure structure matches training.
            action, _ = model.predict(obs)
            
            # 4. Risk management checks before placing order
            # Example: Only risk 2% of available USD balance per trade
            max_risk_amount = 0.02 * usd_balance
            position_size = max_risk_amount / current_price  # For market order
            # Ensure minimum trade quantity constraint: assume 0.01 BTC minimum.
            trade_qty = max(position_size, 0.01)
            
            # 5. Execute trade based on action
            if action == 1 and usd_balance >= current_price * trade_qty:
                print(f"Placing BUY order for {trade_qty} BTC at {current_price}")
                place_order("BTC", "BUY", "MARKET",trade_qty)
            elif action == 2 and btc_balance >= trade_qty:
                print(f"Placing SELL order for {trade_qty} BTC at {current_price}")
                place_order("BTC", "SELL", "MARKET" ,trade_qty)
            else:
                print("No trade executed: insufficient balance or action is HOLD.")
            
        except Exception as e:
            print(f"Error in trading loop: {str(e)}")
        
        # Wait for a defined interval before next trade cycle (e.g., 5 minutes)
        time.sleep(300)

# Example call to start the trading bot loop
trade_bot_loop(model, env)

